package com.example.sskey.dms.Order;

import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.View;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.sskey.dms.OrderDetail.DetailRCview;
import com.example.sskey.dms.OrderDetail.StatusViewDialg;
import com.example.sskey.dms.Utils.CommonStatus;
import com.example.sskey.dms.Utils.UtilBasic;
import com.example.sskey.dms.MainActivity;
import com.example.sskey.dms.R;
import com.sskey.dms.data.remote.APIUtils;
import com.sskey.dms.data.remote.DataRemoteHelper;
import com.sskey.dms.data.remote.SOService;
import com.sskey.dms.data.remote.SucceedUpdate;
import com.sskey.dms.model.DonHang_Detail;
import com.sskey.dms.model.DonHang_Master;
import com.sskey.dms.model.Customer;
import com.sskey.dms.utils.Constants;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class OrderDetailActivity extends AppCompatActivity implements DataRemoteHelper.CallDetailOrder, StatusViewDialg.dismissLisstener {

    private TextView txtorderCode;
    private CheckBox ChboxSpeed;
    private TextView txtStatus;
    private TextView txttimeGiao;
    private TextView txtAddressgiao;
    private TextView txtNameShop;
    private TextView txtphoneShop;
    private TextView btntxtOrder;
    private ImageView enableEdt;

    private RecyclerView rc;
    private TextView txtSum;
    private DonHang_Master dh;
    private DetailRCview adapter;
    private DataRemoteHelper dbHelp;
    private boolean newOr = false;
    private Customer user;
    private StatusViewDialg mchangeStatus;
    private SOService dservice;
    private CommonStatus statOrd;
    private List<Customer> Staff;

    private TextView shiperInfo;
    private TextView shiperFone;
    private TextView note;
    private Customer shiper;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_donhang_master);
        android.support.v7.app.ActionBar toolbar = getSupportActionBar();
        toolbar.hide();

        initial();
        parseOrder();
    }

    private void initial() {
        dservice = APIUtils.getSOService();
        txtAddressgiao = findViewById(R.id.txtDiaChiGiaoHang);
        txtNameShop = findViewById(R.id.txtshopaddress);
        txtorderCode = findViewById(R.id.txt_MaDonHang);
        txtphoneShop = findViewById(R.id.txtshopPhone);
        txtStatus = findViewById(R.id.textView8);
        txttimeGiao = findViewById(R.id.txt_TrangThaiThoiGian);
        ChboxSpeed = findViewById(R.id.chk_Gap);
        txtSum = findViewById(R.id.txtSum);
        btntxtOrder = findViewById(R.id.btntxtOrder);

        shiperInfo = findViewById(R.id.txtshipper);
        shiperFone = findViewById(R.id.txtshiPhone);
        note = findViewById(R.id.NoteInfo);

        rc = findViewById(R.id.ListRecyclerdetail);
        enableEdt = findViewById(R.id.enableEdt);

        //<editor-fold desc=button Save or Detail>
        btntxtOrder.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!newOr) {
                    if (dh.trangThai.equals(Constants.inProgress) && user.MaNguoiDung.equals(dh.maNguoiDung)) {
                        dh.trangThai = Constants.inDelete;
//                        Toast.makeText(OrderDetailActivity.this, "delete", Toast.LENGTH_SHORT).show();
//                        dh.loaiYeuCau = ChboxSpeed.isChecked() ? 1 : 0;
                        dservice.updateOrder(dh).enqueue(new Callback<SucceedUpdate>() {
                            @Override
                            public void onResponse(Call<SucceedUpdate> call, Response<SucceedUpdate> response) {
                                onBackPressed();
                            }

                            @Override
                            public void onFailure(Call<SucceedUpdate> call, Throwable t) {

                            }
                        });
                    }
                    onBackPressed();
                } else {
//                    dh.loaiYeuCau = ChboxSpeed.isChecked() ? 1 : 0;
                    dh.maNguoiDung = user.MaNguoiDung;
                    dh.diaChiGiao = user.DiaChi;
                    dh.donHangChiTiets = new ArrayList<>();
                    dh.donHangChiTiets.addAll(adapter.getList());
                    dservice.saveOrder(dh).enqueue(new Callback<DonHang_Master>() {
                        @Override
                        public void onResponse(Call<DonHang_Master> call, Response<DonHang_Master> response) {
                            Intent it = new Intent(OrderDetailActivity.this, MainActivity.class);
                            it.putExtra(Constants.StartFromDetail, "");
                            startActivity(it);
                            OrderDetailActivity.this.finish();
                        }

                        @Override
                        public void onFailure(Call<DonHang_Master> call, Throwable t) {
                            Toast.makeText(OrderDetailActivity.this, "fail: " + t.getMessage(), Toast.LENGTH_SHORT).show();
                        }
                    });
                }
            }
        });
//</editor-fold> button Save or Detail

        adapter = new DetailRCview(this);
        LinearLayoutManager lm = new LinearLayoutManager(this);
        lm.setOrientation(LinearLayoutManager.VERTICAL);

        rc.setLayoutManager(lm);
        rc.setAdapter(adapter);
        rc.setHasFixedSize(true);
        dbHelp = new DataRemoteHelper(this);
        user = UtilBasic.getUser(this);
        txtStatus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showDlogStatus();
            }
        });
    }

    private void showDlogStatus() {
        mchangeStatus = new StatusViewDialg();
        mchangeStatus.showDialog(this, user.LoaiNguoiDung, Staff, dh, this);
    }

    private void parseOrder() {
        Bundle b = getIntent().getExtras();
        String orM = b.getString(Constants.OrderObj);
        if (b.getInt(Constants.OrderRequest) == Constants.OldOrder)
            newOr = false;
        else newOr = true;

        if (orM.length() > 5)
            dh = UtilBasic.getGs().fromJson(orM, DonHang_Master.class);
        else
            Toast.makeText(this, "Chưa có đơn hàng, hoặc có lỗi dữ liệu", Toast.LENGTH_LONG).show();

        showOrder();
    }

    private void showOrder() {
        if (dh == null) {
            Toast.makeText(this, "Chưa có đơn hàng, hoặc có lỗi dữ liệu", Toast.LENGTH_LONG).show();
        } else {
            if (dh.postMan != null)
                loadShiper(dh.postMan);
            else {
                initiaShiper();
            }
            BindOrder();
        }
    }

    private void initiaShiper() {
        shiper = new Customer();
        shiper.TenNguoiDung = "chưa có";
        shiper.SoDienThoai = "";
    }

    private void loadShiper(String maship) {
        dservice.getCustomerById(maship).enqueue(new Callback<Customer>() {
            @Override
            public void onResponse(Call<Customer> call, Response<Customer> response) {
                if (response.message().contains("OK"))
                    shiper = response.body();
                else {
                    initiaShiper();
                }

                shiperInfo.setText(shiper.TenNguoiDung);
                shiperFone.setText(shiper.SoDienThoai);
            }

            @Override
            public void onFailure(Call<Customer> call, Throwable t) {

            }
        });
    }

    private void BindOrder() {
        if (newOr) {
            statOrd = UtilBasic.getStatusOrder(Constants.inProgress, this);
            Date d = new Date();
            dh.trangThai = Constants.inProgress;
            dh.thoiGianDatHang = d.toGMTString();
            dh.tongTien = 0;
            txtorderCode.setText("đặt hàng");

            dh.thoiGianGiao = "";
            for (DonHang_Detail dt : dh.donHangChiTiets) {
                dt.thanhTien = dt.soLuong * dt.donGia;
                dh.tongTien += dt.thanhTien;
            }
            btntxtOrder.setText(Constants.SendOrder);
        } else {
            statOrd = UtilBasic.getStatusOrder(dh.trangThai, this);

            if (dh.trangThai.equals(Constants.inProgress) && user.MaNguoiDung.equals(dh.maNguoiDung))
                btntxtOrder.setText(Constants.CancelIt);
            else btntxtOrder.setText(Constants.Back);
        }

        txtAddressgiao.setText(dh.diaChiGiao);
        txtNameShop.setText(dh.shopName);
        txtorderCode.setText(dh.maDonHang);
        txtphoneShop.setText(dh.shopPhone);
        txtStatus.setText(dh.trangThai);

        txttimeGiao.setText(dh.thoiGianGiao);
//        ChboxSpeed.setChecked(dh.loaiYeuCau > 0);
        Log.d("<<<BINDD", "BINDD");

        if (user.LoaiNguoiDung == 0 || user.LoaiNguoiDung == 3) {
            txtStatus.setEnabled(true);
            enableEdt.setVisibility(View.VISIBLE);
        } else{
            txtStatus.setEnabled(false);
            txtStatus.setTextColor(Color.BLACK);
        }

        if (user.LoaiNguoiDung == 0) {
            dservice.getCustomerByStaff(user.MaNguoiDung).enqueue(new Callback<List<Customer>>() {
                @Override
                public void onResponse(Call<List<Customer>> call, Response<List<Customer>> response) {
                    Staff = response.body();
                }

                @Override
                public void onFailure(Call<List<Customer>> call, Throwable t) {

                }
            });
        }

        note.setText(dh.loaiYeuCau);
        txtSum.setText(UtilBasic.getNumberFormat().format(dh.tongTien));
        if (newOr)
            adapter.update(dh.donHangChiTiets);
        else loadDetails();
    }

    private void loadDetails() {
        dbHelp.getDetailsDH(dh.maDonHang);
    }


    @Override
    public void Succeed(Response e) {
        try {
            adapter.update((List<DonHang_Detail>) e.body());
        } catch (Exception ex) {
            Toast.makeText(this, "Order  detail: Lỗi data \n" + ex.getMessage(), Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public void Fail(Throwable t) {
        Toast.makeText(this, "Lỗi kết nối\n" + t.getMessage(), Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onDismiss(DialogInterface dialog) {

    }

    @Override
    public void setText(String myresult) {
        statOrd = UtilBasic.getStatusOrder(dh.trangThai, this);
        txtStatus.setText(dh.trangThai);
        if (!dh.trangThai.equals(Constants.inProgress))
            btntxtOrder.setText(Constants.Back);
        loadShiper(dh.postMan);
        note.setText(dh.loaiYeuCau);
    }
}
